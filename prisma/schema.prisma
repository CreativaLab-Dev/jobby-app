generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ---------- Enums ----------
enum Language {
  EN
  ES
}

enum OpportunityType {
  INTERNSHIP
  SCHOLARSHIP
  EXCHANGE_PROGRAM
  RESEARCH_FELLOWSHIP
  GRADUATE_PROGRAM
  FREELANCE
  FULL_TIME
  PART_TIME
}

enum CvType {
  TECHNOLOGY
  SALES
  MARKETING
  SOCIAL_MEDIA
  DESIGN
  FINANCE
}

enum CvSectionType {
  SUMMARY
  EXPERIENCE
  EDUCATION
  SKILLS
  PROJECTS
  CERTIFICATIONS
  LANGUAGES
  CONTACT
  COMPLEMENTS
  ACHIEVEMENTS
  INTERESTS
}

enum JobStatus {
  PENDING
  IN_PROGRESS
  SUCCEEDED
  FAILED
  CANCELLED
}

model User {
  id              String  @id
  name            String
  email           String
  emailVerified   Boolean
  image           String?
  updatedPassword Boolean @default(false)

  isBlocked   Boolean   @default(false)
  lastLoginAt DateTime?

  // Main fields for user agreements
  acceptedTermsAndConditions Boolean   @default(false)
  acceptedTermsAt            DateTime?
  acceptedPrivacyPolicy      Boolean   @default(false)
  acceptedPrivacyPolicyAt    DateTime?

  // Optional fields for security policies
  acceptedCookiePolicy     Boolean   @default(false)
  acceptedSecurityPolicy   Boolean   @default(false)
  acceptedSecurityPolicyAt DateTime?

  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  subscriptions UserSubscription[]
  cvs           Cv[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model SubscriptionPlan {
  id            String   @id @default(uuid())
  slug          String   @unique // e.g. "free", "pro", "enterprise"
  name          String
  description   String?
  priceCents    Decimal  @default(0) @db.Decimal(10, 2) // price in cents
  currency      String   @default("USD")
  features      Json? // JSON list of features/pricing tiers
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  manualCvLimit Int      @default(2) // number of manual CVs allowed
  uploadCvLimit Int      @default(2) // number of uploaded CVs allowed

  userSubscriptions UserSubscription[]

  @@map("subscription_plan")
}

model UserSubscription {
  id            String           @id @default(uuid())
  user          User             @relation(fields: [userId], references: [id])
  userId        String
  plan          SubscriptionPlan @relation(fields: [planId], references: [id])
  planId        String
  startedAt     DateTime         @default(now())
  expiresAt     DateTime?
  active        Boolean          @default(true)
  manualCvsUsed Int              @default(0) // number of manual CVs created
  uploadCvsUsed Int              @default(0) // number of uploaded CVs created
  metadata      Json? // e.g. billing provider ids, coupon info
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@index([userId])
  @@index([planId])
  @@index([active])
  @@map("user_subscription")
}

model Cv {
  id              String          @id @default(uuid())
  user            User?           @relation(fields: [userId], references: [id])
  userId          String?
  createdByJobId  String?
  language        Language        @default(EN)
  opportunityType OpportunityType
  cvType          CvType
  title           String?
  extractedJson   Json?
  fullTextSearch  String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  deletedAt       DateTime?

  // Relations
  sections    CvSection[] // logical sections (Experience, Education, Skills...)
  evaluations CvEvaluation[] // evaluation history (one per analysis run)
  previews    CvPreview[] // preview snapshots (after edits / before/after eval)
  attachments Attachment[]
  queueJobs   QueueJob[] // related queue jobs (creation, evaluation, re-eval)
  notes       String?

  @@index([userId])
  @@index([language])
  @@index([opportunityType])
  @@index([cvType])
  @@map("cv")
}

model CvSection {
  id          String        @id @default(uuid())
  cv          Cv            @relation(fields: [cvId], references: [id])
  cvId        String
  sectionType CvSectionType
  title       String? // e.g. "Work Experience"
  contentJson Json? // structured content for that section (array of items)
  order       Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Section-level latest score may be stored in EvaluationScore per evaluation run.
  @@index([cvId, sectionType])
  @@index([cvId, order])
  @@map("cv_section")
}

model CvEvaluation {
  id              String    @id @default(uuid())
  cv              Cv        @relation(fields: [cvId], references: [id])
  cvId            String
  startedAt       DateTime  @default(now())
  finishedAt      DateTime?
  status          JobStatus @default(PENDING)
  overallScore    Float? // aggregated score 0..100 or custom range
  summary         String? // summary produced by evaluator
  extractorOutput Json? // optional extra extractor output saved for this evaluation
  createdByJobId  String? // queue job id
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  scores          EvaluationScore[]
  recommendations Recommendation[]

  @@index([cvId])
  @@index([status])
  @@index([createdAt])
  @@map("cv_evaluation")
}

model EvaluationScore {
  id           String        @id @default(uuid())
  evaluation   CvEvaluation  @relation(fields: [evaluationId], references: [id])
  evaluationId String
  sectionType  CvSectionType
  score        Float // e.g. 0..100
  confidence   Float? // optional confidence measure 0..1
  detailsJson  Json? // per-section breakdown: { bullets: [...], missing_fields: [...] }
  createdAt    DateTime      @default(now())

  @@index([evaluationId, sectionType])
  @@map("evaluation_score")
}

model Recommendation {
  id           String         @id @default(uuid())
  evaluation   CvEvaluation   @relation(fields: [evaluationId], references: [id])
  evaluationId String
  sectionType  CvSectionType?
  text         String
  severity     String? // e.g. "low", "medium", "high" or numeric
  metadata     Json? // e.g. suggestions, example snippets
  createdAt    DateTime       @default(now())

  @@index([evaluationId])
  @@map("recommendation")
}

model CvPreview {
  id           String   @id @default(uuid())
  cv           Cv       @relation(fields: [cvId], references: [id])
  cvId         String
  snapshotHtml String? // rendered HTML preview (keep small or store in object storage and reference here)
  snapshotJson Json? // structured preview (positions, layout)
  createdAt    DateTime @default(now())
  createdBy    String? // user id or system
  note         String? // e.g. "after edit: changed skills"

  @@index([cvId, createdAt])
  @@map("cv_preview")
}

model Attachment {
  id        String   @id @default(uuid())
  cv        Cv       @relation(fields: [cvId], references: [id])
  cvId      String
  filename  String
  mimeType  String?
  url       String // object storage URL
  size      Int?
  createdAt DateTime @default(now())

  @@index([cvId])
  @@map("attachment")
}

model QueueJob {
  id          String    @id @default(uuid())
  jobId       String    @unique // external queue job id (BullMQ, Rabbit, etc.)
  type        String // e.g. "CREATE_CV", "EVALUATE_CV", "RE_EVALUATE"
  payload     Json
  status      JobStatus @default(PENDING)
  attempts    Int       @default(0)
  maxAttempts Int       @default(5)
  lastError   String?
  startedAt   DateTime?
  finishedAt  DateTime?
  cv          Cv?       @relation(fields: [cvId], references: [id])
  cvId        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([status])
  @@index([type])
  @@index([cvId])
  @@map("queue_job")
}
